"""
===============================================================================
                    CALLBACKS DEL LAYOUT HIST√ìRICO
===============================================================================

Este m√≥dulo gestiona la visualizaci√≥n y an√°lisis de datos meteorol√≥gicos hist√≥ricos
integrados con evaluaci√≥n de riesgo de enfermedades del olivo.

Caracter√≠sticas principales:
‚Ä¢ Carga de datos desde merged_output.csv
‚Ä¢ Selectores din√°micos de per√≠odo y agrupaci√≥n temporal
‚Ä¢ Gr√°ficos especializados (precipitaci√≥n/humedad y temperatura)
‚Ä¢ M√©tricas meteorol√≥gicas en tiempo real
‚Ä¢ Sistema de alertas inteligente de riesgo de repilo
‚Ä¢ Agregaci√≥n flexible (diaria, semanal, mensual, trimestral)
‚Ä¢ Filtrado por per√≠odos personalizados

Autor: Sistema de Monitoreo Agr√≠cola
Versi√≥n: 2.1
√öltima actualizaci√≥n: 2025

===============================================================================
"""

# ===============================================================================
#                                 IMPORTS
# ===============================================================================

# Librer√≠as est√°ndar
import logging
import os
from datetime import datetime, timedelta

# An√°lisis de datos
import pandas as pd

# Framework Dash
from dash import callback, Input, Output, State, html, no_update
import dash_bootstrap_components as dbc
import plotly.graph_objects as go

# Utilidades espec√≠ficas del proyecto
from src.utils.simplified_plots import (
    create_precipitation_humidity_chart,
    create_temperature_chart,
    create_empty_chart
)
from src.utils.repilo_analysis import analyze_repilo_risk
from src.components.ui_components_improved import create_metric_card, create_alert_card

# Configuraci√≥n de logging
logger = logging.getLogger(__name__)

# ===============================================================================
#                            CONFIGURACI√ìN
# ===============================================================================

# Ruta al archivo de datos meteorol√≥gicos hist√≥ricos
DATA_FILE_PATH = os.path.join("data", "raw", "merged_output.csv")

# ===============================================================================
#                       FUNCIONES DE CARGA DE DATOS
# ===============================================================================

def load_weather_data() -> pd.DataFrame:
    """
    Carga y preprocesa los datos meteorol√≥gicos desde archivo CSV.
    
    Procesa:
    ‚Ä¢ Validaci√≥n de existencia de archivo
    ‚Ä¢ Lectura con separador personalizado (;)
    ‚Ä¢ Conversi√≥n de fechas con formato mixto
    ‚Ä¢ Limpieza de registros inv√°lidos
    ‚Ä¢ Ordenamiento temporal
    
    Returns:
        pd.DataFrame: Datos meteorol√≥gicos procesados y ordenados
    """
    try:
        # Verificar existencia del archivo
        if not os.path.exists(DATA_FILE_PATH):
            logger.error(f"üìÇ Archivo de datos no encontrado: {DATA_FILE_PATH}")
            return pd.DataFrame()
        
        # Leer CSV con separador espec√≠fico
        df = pd.read_csv(DATA_FILE_PATH, sep=';')
        logger.debug(f"üìä Archivo CSV le√≠do: {len(df)} filas iniciales")
        
        # Convertir columna de fechas (formato mixto para flexibilidad)
        df['Dates'] = pd.to_datetime(df['Dates'], format='mixed', errors='coerce')
        
        # Limpiar filas con fechas inv√°lidas
        initial_count = len(df)
        df = df.dropna(subset=['Dates'])
        cleaned_count = len(df)
        
        if initial_count > cleaned_count:
            logger.warning(f"üßπ Eliminadas {initial_count - cleaned_count} filas con fechas inv√°lidas")
        
        # Ordenar cronol√≥gicamente
        df = df.sort_values('Dates')
        
        # Log informativo del rango de datos
        if not df.empty:
            date_min = df['Dates'].min()
            date_max = df['Dates'].max()
            logger.info(f"‚úÖ Datos meteorol√≥gicos cargados: {len(df)} registros")
            logger.info(f"üìÖ Rango temporal: {date_min.strftime('%Y-%m-%d')} hasta {date_max.strftime('%Y-%m-%d')}")
        
        return df
        
    except Exception as e:
        logger.error(f"‚ùå Error cr√≠tico cargando datos meteorol√≥gicos: {e}")
        return pd.DataFrame()

def filter_data_by_period(df: pd.DataFrame, period: str, start_date: str = None, end_date: str = None) -> pd.DataFrame:
    """
    Filtra datos meteorol√≥gicos seg√∫n per√≠odo temporal especificado.
    
    Soporta per√≠odos predefinidos y rangos personalizados:
    ‚Ä¢ "24h" - √öltimas 24 horas
    ‚Ä¢ "7d" - √öltima semana  
    ‚Ä¢ "30d" - √öltimo mes
    ‚Ä¢ "custom" - Rango personalizado con fechas inicio/fin
    
    Args:
        df (pd.DataFrame): Datos meteorol√≥gicos con columna 'Dates'
        period (str): Tipo de per√≠odo ('24h', '7d', '30d', 'custom')
        start_date (str, optional): Fecha inicio para per√≠odo personalizado
        end_date (str, optional): Fecha fin para per√≠odo personalizado
        
    Returns:
        pd.DataFrame: Datos filtrados seg√∫n el per√≠odo especificado
    """
    # Validar datos de entrada
    if df.empty:
        logger.warning("üîç DataFrame vac√≠o para filtrado por per√≠odo")
        return df
    
    now = datetime.now()
    
    # Per√≠odo personalizado con fechas espec√≠ficas
    if period == "custom" and start_date and end_date:
        try:
            start_dt = pd.to_datetime(start_date)
            # Incluir todo el d√≠a final (hasta 23:59:59)
            end_dt = pd.to_datetime(end_date) + timedelta(hours=23, minutes=59, seconds=59)
            
            filtered_df = df[(df['Dates'] >= start_dt) & (df['Dates'] <= end_dt)]
            logger.debug(f"üìÖ Filtrado personalizado: {len(filtered_df)} registros entre {start_date} y {end_date}")
            return filtered_df
            
        except Exception as e:
            logger.error(f"‚ùå Error en filtrado personalizado: {e}")
            return df
    
    # Per√≠odos predefinidos relativos al momento actual
    elif period == "24h":
        cutoff = now - timedelta(hours=24)
        filtered_df = df[df['Dates'] >= cutoff]
        logger.debug(f"üïê Filtrado 24h: {len(filtered_df)} registros desde {cutoff}")
        return filtered_df
        
    elif period == "7d":
        cutoff = now - timedelta(days=7)
        filtered_df = df[df['Dates'] >= cutoff]
        logger.debug(f"üìÜ Filtrado 7d: {len(filtered_df)} registros desde {cutoff.date()}")
        return filtered_df
        
    elif period == "30d":
        cutoff = now - timedelta(days=30)
        filtered_df = df[df['Dates'] >= cutoff]
        logger.debug(f"üìä Filtrado 30d: {len(filtered_df)} registros desde {cutoff.date()}")
        return filtered_df
    
    else:
        # Sin filtrado - retornar datos completos
        logger.debug(f"üìã Sin filtrado aplicado: {len(df)} registros totales")
        return df

# ===============================================================================
#                      FUNCIONES DE AGREGACI√ìN DE DATOS
# ===============================================================================

def aggregate_data(df: pd.DataFrame, grouping: str) -> tuple[pd.DataFrame, bool]:
    """
    Agrupa datos meteorol√≥gicos seg√∫n frecuencia temporal especificada.
    
    Aplica agregaciones apropiadas por variable:
    ‚Ä¢ Temperatura: m√≠nimo, promedio y m√°ximo
    ‚Ä¢ Humedad relativa: promedio
    ‚Ä¢ Precipitaci√≥n: suma acumulada
    ‚Ä¢ Viento: promedio de velocidad y direcci√≥n
    ‚Ä¢ Radiaci√≥n solar: promedio
    
    Args:
        df (pd.DataFrame): Datos meteorol√≥gicos con columna 'Dates'
        grouping (str): Frecuencia de agrupaci√≥n ('D', 'W', 'M', 'Q', 'none')
        
    Returns:
        tuple[pd.DataFrame, bool]: (datos_agregados, es_agregado)
    """
    # Sin agrupaci√≥n - retornar datos originales
    if df.empty or grouping == "none":
        return df, False
    
    try:
        # Mapeo de frecuencias de resample
        freq_map = {
            "D": "D",     # Diario
            "W": "W",     # Semanal (domingo a s√°bado)
            "M": "M",     # Mensual (fin de mes)
            "Q": "Q"      # Trimestral (fin de trimestre)
        }
        
        freq = freq_map.get(grouping, "D")
        logger.debug(f"üìà Iniciando agregaci√≥n con frecuencia: {freq}")
        
        # Configurar agregaciones por variable meteorol√≥gica
        aggregation_rules = {
            'Air_Temp': ['min', 'mean', 'max'],  # Temperatura: rango completo
            'Air_Relat_Hum': 'mean',             # Humedad: promedio
            'Rain': 'sum',                       # Precipitaci√≥n: acumulada
            'Wind_Speed': 'mean',                # Viento: promedio
            'Wind_Dir': 'mean',                  # Direcci√≥n: promedio circular aproximado
            'Solar_Rad': 'mean'                  # Radiaci√≥n: promedio
        }
        
        # Aplicar agrupaci√≥n con √≠ndice temporal
        df_grouped = (
            df.set_index('Dates')
            .resample(freq)
            .agg(aggregation_rules)
            .reset_index()
        )
        
        # Aplanar estructura de columnas multinivel
        df_grouped.columns = [
            'Dates', 'Air_Temp_min', 'Air_Temp_mean', 'Air_Temp_max',
            'Air_Relat_Hum', 'Rain', 'Wind_Speed', 'Wind_Dir', 'Solar_Rad'
        ]
        
        # Crear alias para compatibilidad con gr√°ficos existentes
        df_grouped['Air_Temp'] = df_grouped['Air_Temp_mean']
        
        logger.info(f"‚úÖ Agregaci√≥n completada ({grouping}): {len(df_grouped)} puntos de {len(df)} originales")
        return df_grouped, True
        
    except Exception as e:
        logger.error(f"‚ùå Error durante agregaci√≥n de datos: {e}")
        return df, False

# ===============================================================================
#                        FUNCI√ìN PRINCIPAL DE REGISTRO
# ===============================================================================

def register_callbacks(app):
    """
    Registra todos los callbacks del layout hist√≥rico meteorol√≥gico.
    
    Configura la l√≥gica reactiva para:
    ‚Ä¢ Carga y almacenamiento de datos meteorol√≥gicos
    ‚Ä¢ Control de filtros y selectores temporales
    ‚Ä¢ Actualizaci√≥n de m√©tricas en tiempo real
    ‚Ä¢ Generaci√≥n de gr√°ficos especializados
    ‚Ä¢ Sistema de alertas de riesgo de enfermedades
    
    Args:
        app (Dash): Instancia de la aplicaci√≥n Dash
        
    Returns:
        None: Registra los callbacks en la aplicaci√≥n
    """
    logger.info("üìà Registrando callbacks del layout hist√≥rico...")
    
    # ===============================================================================
    #                        CALLBACK DE CARGA DE DATOS
    # ===============================================================================
    
    @app.callback(
        Output("weather-data-store", "data"),
        Input("update-charts-btn", "n_clicks"),
        prevent_initial_call=False
    )
    def load_weather_data_callback(n_clicks):
        """
        Carga datos meteorol√≥gicos desde archivo CSV al almacenamiento reactivo.
        
        Proceso:
        ‚Ä¢ Lectura desde merged_output.csv
        ‚Ä¢ Preprocesamiento y limpieza
        ‚Ä¢ Conversi√≥n a formato dict para Store
        ‚Ä¢ Logging de estad√≠sticas de carga
        
        Args:
            n_clicks (int): N√∫mero de clics en bot√≥n actualizar
            
        Returns:
            dict: Datos meteorol√≥gicos en formato de registros
        """
        try:
            # Cargar y procesar datos desde archivo
            df = load_weather_data()
            
            if df.empty:
                logger.warning("üö® No se obtuvieron datos meteorol√≥gicos")
                return {}
            
            # Convertir DataFrame a dict para almacenamiento en Store
            data_records = df.to_dict('records')
            logger.debug(f"üíæ Datos convertidos para almacenamiento: {len(data_records)} registros")
            
            return data_records
            
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico en callback de carga de datos: {e}")
            return {}
    
    # ===============================================================================
    #                     CALLBACK DE CONTROL DE FILTROS
    # ===============================================================================
    
    @app.callback(
        [
            Output("custom-date-container", "style"),
            Output("custom-date-label", "style"),
            Output("current-filters-store", "data")
        ],
        [
            Input("period-selector", "value"),
            Input("start-date-picker", "date"),
            Input("end-date-picker", "date"),
            Input("grouping-selector", "value")
        ],
        State("current-filters-store", "data")
    )
    def update_filters(period, start_date, end_date, grouping, current_filters):
        """
        Gestiona la visibilidad y estado de los controles de filtrado temporal.
        
        Funcionalidades:
        ‚Ä¢ Mostrar/ocultar selector de fecha personalizada
        ‚Ä¢ Actualizar configuraci√≥n de filtros activos
        ‚Ä¢ Sincronizar estado entre componentes
        ‚Ä¢ Validaci√≥n de par√°metros de entrada
        
        Args:
            period (str): Per√≠odo seleccionado ('24h', '7d', '30d', 'custom')
            start_date (str): Fecha inicio para per√≠odo personalizado
            end_date (str): Fecha fin para per√≠odo personalizado
            grouping (str): Frecuencia de agrupaci√≥n ('D', 'W', 'M', 'Q', 'none')
            current_filters (dict): Estado actual de filtros
            
        Returns:
            tuple: (estilos_selector_fecha, nueva_configuracion_filtros)
        """
        # Configurar visibilidad del selector de fecha personalizada
        if period == "custom":
            # Mostrar selector personalizado
            container_style = {'display': 'block'}
            label_style = {
                'color': '#2c3e50',  # AGRI_THEME['colors']['text_primary']
                'display': 'block'
            }
        else:
            # Ocultar selector para per√≠odos predefinidos
            container_style = {'display': 'none'}
            label_style = {'display': 'none'}
        
        # Actualizar configuraci√≥n de filtros
        new_filters = {
            "period": period,
            "grouping": grouping,
            "start_date": start_date,
            "end_date": end_date
        }
        
        logger.debug(f"üîç Filtros actualizados: per√≠odo={period}, agrupaci√≥n={grouping}")
        
        return container_style, label_style, new_filters
    
    # ===============================================================================
    #                    CALLBACK DE M√âTRICAS METEOROL√ìGICAS
    # ===============================================================================
    
    @app.callback(
        Output("current-weather-metrics", "children"),
        Input("weather-data-store", "data")
    )
    def update_current_weather(weather_data):
        """
        Actualiza las m√©tricas meteorol√≥gicas del registro m√°s reciente.
        
        Genera tarjetas informativas con:
        ‚Ä¢ Fecha y hora de √∫ltima actualizaci√≥n
        ‚Ä¢ Temperatura con evaluaci√≥n de riesgo
        ‚Ä¢ Humedad relativa con alertas cr√≠ticas
        ‚Ä¢ Precipitaci√≥n acumulada
        ‚Ä¢ Velocidad y direcci√≥n del viento
        ‚Ä¢ Intensidad de radiaci√≥n solar
        
        Args:
            weather_data (list): Registros meteorol√≥gicos desde Store
            
        Returns:
            dbc.Row|Alert: Tarjetas de m√©tricas o alerta si no hay datos
        """
        try:
            # Validar disponibilidad de datos
            if not weather_data:
                return create_alert_card(
                    message="No hay datos meteorol√≥gicos disponibles",
                    alert_type="warning",
                    title="Sin Datos"
                )
            
            # Convertir a DataFrame y procesar fechas
            df = pd.DataFrame(weather_data)
            df['Dates'] = pd.to_datetime(df['Dates'], format='mixed', errors='coerce')
            
            # Obtener registro m√°s reciente
            latest = df.iloc[-1]
            logger.debug(f"üîÑ Actualizando m√©tricas con datos de: {latest['Dates']}")
            
            # Generar tarjetas de m√©tricas con evaluaci√≥n inteligente
            metric_cards = [
                # Timestamp de √∫ltima actualizaci√≥n
                dbc.Col([
                    create_metric_card(
                        title="√öltima Actualizaci√≥n",
                        value=latest['Dates'].strftime("%d/%m/%Y"),
                        unit="",
                        icon="fas fa-calendar-alt",
                        color="primary",
                        description=latest['Dates'].strftime("%H:%M hrs")
                    )
                ], md=2),
                
                # Temperatura con evaluaci√≥n de riesgo para repilo
                dbc.Col([
                    create_metric_card(
                        title="Temperatura",
                        value=f"{latest['Air_Temp']:.1f}",
                        unit="¬∞C",
                        icon="fas fa-thermometer-half",
                        color="danger" if 15 <= latest['Air_Temp'] <= 20 else "info",
                        description="Riesgo Alto" if 15 <= latest['Air_Temp'] <= 20 else "Normal"
                    )
                ], md=2),
                
                # Humedad relativa con alertas cr√≠ticas
                dbc.Col([
                    create_metric_card(
                        title="Humedad Relativa",
                        value=f"{latest['Air_Relat_Hum']:.1f}",
                        unit="%",
                        icon="fas fa-tint",
                        color="danger" if latest['Air_Relat_Hum'] > 95 else "success",
                        description="Cr√≠tica" if latest['Air_Relat_Hum'] > 95 else "Normal"
                    )
                ], md=2),
                
                # Precipitaci√≥n acumulada
                dbc.Col([
                    create_metric_card(
                        title="Precipitaci√≥n",
                        value=f"{latest['Rain']:.1f}",
                        unit="mm",
                        icon="fas fa-cloud-rain",
                        color="info",
                        description="Acumulada"
                    )
                ], md=2),
                
                # Viento con direcci√≥n
                dbc.Col([
                    create_metric_card(
                        title="Viento",
                        value=f"{latest['Wind_Speed']:.1f}",
                        unit="m/s",
                        icon="fas fa-wind",
                        color="info",
                        description=f"Dir: {int(latest['Wind_Dir'])}¬∞"
                    )
                ], md=2),
                
                # Radiaci√≥n solar
                dbc.Col([
                    create_metric_card(
                        title="Rad. Solar",
                        value=f"{latest['Solar_Rad']:.0f}",
                        unit="W/m¬≤",
                        icon="fas fa-sun",
                        color="warning",
                        description="Intensidad"
                    )
                ], md=2)
            ]
            
            return dbc.Row(metric_cards, className="g-3")
            
        except Exception as e:
            logger.error(f"‚ùå Error actualizando m√©tricas meteorol√≥gicas: {e}")
            return dbc.Alert(
                f"Error procesando m√©tricas: {str(e)}", 
                color="danger", className="text-center"
            )
    
    # ===============================================================================
    #                        CALLBACK DE GR√ÅFICOS PRINCIPALES
    # ===============================================================================
    
    @app.callback(
        [
            Output("precipitation-humidity-chart", "figure"),
            Output("temperature-chart", "figure")
        ],
        [
            Input("weather-data-store", "data"),
            Input("current-filters-store", "data")
        ]
    )
    def update_charts(weather_data, filters):
        """
        Actualiza los gr√°ficos especializados de datos meteorol√≥gicos.
        
        Genera:
        ‚Ä¢ Gr√°fico combinado de precipitaci√≥n y humedad relativa
        ‚Ä¢ Gr√°fico de temperatura con rangos m√≠n/max (si est√° agregado)
        ‚Ä¢ Aplicaci√≥n de filtros temporales y agrupaci√≥n
        ‚Ä¢ Manejo de estados vac√≠os y errores
        
        Args:
            weather_data (list): Datos meteorol√≥gicos desde Store
            filters (dict): Configuraci√≥n de filtros activos
            
        Returns:
            tuple: (figura_precipitacion_humedad, figura_temperatura)
        """
        try:
            # Validar datos de entrada
            if not weather_data or not filters:
                logger.warning("üö® Datos o filtros no disponibles para gr√°ficos")
                empty_fig = create_empty_chart("No hay datos disponibles")
                return empty_fig, empty_fig
            
            # Convertir y procesar datos
            df = pd.DataFrame(weather_data)
            df['Dates'] = pd.to_datetime(df['Dates'], format='mixed', errors='coerce')
            
            # Limpiar registros con fechas inv√°lidas
            initial_count = len(df)
            df = df.dropna(subset=['Dates'])
            
            if len(df) < initial_count:
                logger.debug(f"üßπ Eliminados {initial_count - len(df)} registros con fechas inv√°lidas")
            
            # Aplicar filtrado temporal seg√∫n configuraci√≥n
            df_filtered = filter_data_by_period(
                df, 
                filters['period'], 
                filters.get('start_date'), 
                filters.get('end_date')
            )
            
            # Verificar disponibilidad tras filtrado
            if df_filtered.empty:
                logger.warning("üîç No hay datos en el per√≠odo seleccionado")
                empty_fig = create_empty_chart("No hay datos en el per√≠odo seleccionado")
                return empty_fig, empty_fig
            
            # Aplicar agrupaci√≥n temporal si se especifica
            df_final, is_aggregated = aggregate_data(df_filtered, filters['grouping'])
            
            if df_final.empty:
                logger.error("‚ùå Error durante procesamiento de datos")
                empty_fig = create_empty_chart("Error procesando los datos")
                return empty_fig, empty_fig
            
            # Generar gr√°ficos especializados
            logger.debug(f"üìä Generando gr√°ficos con {len(df_final)} puntos de datos")
            
            fig_precip_hum = create_precipitation_humidity_chart(df_final)
            fig_temp = create_temperature_chart(df_final, is_aggregated)
            
            return fig_precip_hum, fig_temp
            
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico actualizando gr√°ficos: {e}")
            error_fig = create_empty_chart(f"Error: {str(e)}")
            return error_fig, error_fig
    
    # ===============================================================================
    #                       CALLBACK DE ALERTAS DE ENFERMEDAD
    # ===============================================================================
    
    @app.callback(
        Output("disease-alerts", "children"),
        Input("weather-data-store", "data")
    )
    def update_disease_alerts(weather_data):
        """
        Actualiza el sistema de alertas con dise√±o mejorado y an√°lisis completo.
        
        Analiza condiciones meteorol√≥gicas para evaluar riesgos m√∫ltiples:
        ‚Ä¢ Riesgo de repilo (temperatura, humedad, precipitaci√≥n)
        ‚Ä¢ Control t√©rmico (temperaturas extremas)
        ‚Ä¢ Gesti√≥n h√≠drica (necesidades de riego)
        
        Args:
            weather_data (list): Datos meteorol√≥gicos desde Store
            
        Returns:
            html.Div: Sistema de alertas mejorado con tarjetas especializadas
        """
        try:
            # Validar disponibilidad de datos
            if not weather_data:
                return html.Div([
                    # Panel principal cuando no hay datos
                    dbc.Row([
                        dbc.Col([
                            dbc.Card([
                                dbc.CardBody([
                                    html.Div([
                                        html.Div([
                                            html.I(className="fas fa-exclamation-triangle", 
                                                  style={
                                                      'fontSize': '2.5rem', 
                                                      'color': '#ffc107',
                                                      'background': 'linear-gradient(135deg, #fff3cd 0%, #ffc107 100%)',
                                                      'WebkitBackgroundClip': 'text',
                                                      'WebkitTextFillColor': 'transparent'
                                                  }),
                                        ], className="me-3"),
                                        html.Div([
                                            html.H6("Sistema de Monitoreo en Espera", className="fw-bold mb-2"),
                                            html.P("No hay datos meteorol√≥gicos disponibles para el an√°lisis de riesgos.", 
                                                  className="mb-2 text-muted"),
                                            html.Div([
                                                html.I(className="fas fa-info-circle me-1", style={'color': '#6c757d'}),
                                                html.Small("Esperando datos del sistema meteorol√≥gico", className="text-muted")
                                            ])
                                        ], className="flex-grow-1")
                                    ], className="d-flex align-items-start")
                                ], className="p-3")
                            ], style={
                                'background': 'linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%)',
                                'border': '2px solid #ffc107',
                                'borderRadius': '12px',
                                'boxShadow': '0 4px 15px rgba(255, 193, 7, 0.1)'
                            })
                        ], md=12, className="mb-4")
                    ]),
                    # Tarjetas de monitoreo en estado inactivo
                    dbc.Row([
                        dbc.Col([
                            dbc.Card([
                                dbc.CardBody([
                                    html.Div([
                                        html.I(className="fas fa-thermometer-half mb-2", 
                                              style={'fontSize': '1.8rem', 'color': '#6c757d'}),
                                        html.H6("Control T√©rmico", className="fw-bold mb-2 text-muted"),
                                        html.P("Esperando datos de temperatura", className="small text-muted mb-2"),
                                        html.Div([
                                            html.Span("Estado: ", className="fw-bold"),
                                            html.Span("‚ö™ Sin datos", className="badge bg-secondary")
                                        ])
                                    ], className="text-center")
                                ], className="p-3")
                            ], style={
                                'background': '#f8f9fa',
                                'border': '1px solid #dee2e6',
                                'borderRadius': '10px',
                                'opacity': '0.7'
                            })
                        ], md=4),
                        dbc.Col([
                            dbc.Card([
                                dbc.CardBody([
                                    html.Div([
                                        html.I(className="fas fa-tint mb-2", 
                                              style={'fontSize': '1.8rem', 'color': '#6c757d'}),
                                        html.H6("Seguimiento H√≠drico", className="fw-bold mb-2 text-muted"),
                                        html.P("Esperando datos de humedad", className="small text-muted mb-2"),
                                        html.Div([
                                            html.Span("Estado: ", className="fw-bold"),
                                            html.Span("‚ö™ Sin datos", className="badge bg-secondary")
                                        ])
                                    ], className="text-center")
                                ], className="p-3")
                            ], style={
                                'background': '#f8f9fa',
                                'border': '1px solid #dee2e6',
                                'borderRadius': '10px',
                                'opacity': '0.7'
                            })
                        ], md=4),
                        dbc.Col([
                            dbc.Card([
                                dbc.CardBody([
                                    html.Div([
                                        html.I(className="fas fa-cloud-rain mb-2", 
                                              style={'fontSize': '1.8rem', 'color': '#6c757d'}),
                                        html.H6("Gesti√≥n de Riego", className="fw-bold mb-2 text-muted"),
                                        html.P("Esperando datos de precipitaci√≥n", className="small text-muted mb-2"),
                                        html.Div([
                                            html.Span("Estado: ", className="fw-bold"),
                                            html.Span("‚ö™ Sin datos", className="badge bg-secondary")
                                        ])
                                    ], className="text-center")
                                ], className="p-3")
                            ], style={
                                'background': '#f8f9fa',
                                'border': '1px solid #dee2e6',
                                'borderRadius': '10px',
                                'opacity': '0.7'
                            })
                        ], md=4)
                    ])
                ])
            
            # Convertir y procesar datos temporales
            df = pd.DataFrame(weather_data)
            df['Dates'] = pd.to_datetime(df['Dates'], format='mixed', errors='coerce')
            
            # Ejecutar an√°lisis de riesgo de repilo (√∫ltimas 48 horas)
            logger.debug("ü¶† Ejecutando an√°lisis de riesgo de repilo...")
            risk_analysis = analyze_repilo_risk(df, hours_window=48)
            risk_level = risk_analysis.get('overall_risk', 'bajo')
            
            # Obtener datos m√°s recientes para an√°lisis
            latest_data = df.iloc[-1] if not df.empty else {}
            temp = latest_data.get('Air_Temp', 22.5)
            humidity = latest_data.get('Air_Relat_Hum', 68)
            rain = latest_data.get('Rain', 0)
            
            # Determinar estados basados en datos reales
            temp_status = "üü¢ Normal" if 10 < temp < 35 else "üü° Vigilancia" if temp > 35 else "üî¥ Cr√≠tico"
            humidity_status = "üü¢ √ìptimo" if humidity < 80 else "üü° Vigilancia" if humidity < 95 else "üî¥ Alto riesgo"
            rain_status = "üü¢ √ìptimo" if rain == 0 else "üü° Moderado" if rain < 10 else "üî¥ Intenso"
            
            # Generar el panel de alertas mejorado con datos reales
            return html.Div([
                # Panel de alertas principal
                dbc.Row([
                    dbc.Col([
                        dbc.Card([
                            dbc.CardBody([
                                html.Div([
                                    html.Div([
                                        html.I(className="fas fa-shield-alt", 
                                              style={
                                                  'fontSize': '2.5rem', 
                                                  'color': '#17a2b8',
                                                  'background': 'linear-gradient(135deg, #5bc0de 0%, #17a2b8 100%)',
                                                  'WebkitBackgroundClip': 'text',
                                                  'WebkitTextFillColor': 'transparent'
                                              }),
                                    ], className="me-3"),
                                    html.Div([
                                        html.H6("Sistema de Monitoreo Activo", className="fw-bold mb-2"),
                                        html.P(f"An√°lisis en tiempo real completado. Riesgo de repilo: {risk_level.upper()}. Condiciones monitoreadas para prevenir riesgos en el cultivo.", 
                                              className="mb-2 text-muted"),
                                        html.Div([
                                            html.I(className="fas fa-clock me-1", style={'color': '#6c757d'}),
                                            html.Small("Actualizado hace 5 minutos", className="text-muted")
                                        ])
                                    ], className="flex-grow-1")
                                ], className="d-flex align-items-start")
                            ], className="p-3")
                        ], style={
                            'background': 'linear-gradient(135deg, #d1ecf1 0%, #bee5eb 100%)',
                            'border': '2px solid #17a2b8',
                            'borderRadius': '12px',
                            'boxShadow': '0 4px 15px rgba(23, 162, 184, 0.1)'
                        })
                    ], md=12, className="mb-4")
                ]),
                
                # Tarjetas de monitoreo espec√≠fico con datos reales
                dbc.Row([
                    # Temperatura
                    dbc.Col([
                        dbc.Card([
                            dbc.CardBody([
                                html.Div([
                                    html.I(className="fas fa-thermometer-half mb-2", 
                                          style={'fontSize': '1.8rem', 'color': '#dc3545'}),
                                    html.H6("Control T√©rmico", className="fw-bold mb-2"),
                                    html.P(f"Temp. actual: {temp}¬∞C", className="small text-muted mb-2"),
                                    html.Div([
                                        html.Span("Estado: ", className="fw-bold"),
                                        html.Span(temp_status, className="badge bg-success" if "üü¢" in temp_status else "badge bg-warning" if "üü°" in temp_status else "badge bg-danger")
                                    ])
                                ], className="text-center")
                            ], className="p-3")
                        ], style={
                            'background': 'linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%)',
                            'border': '1px solid #dc3545',
                            'borderRadius': '10px',
                            'boxShadow': '0 3px 10px rgba(220, 53, 69, 0.1)',
                            'transition': 'transform 0.2s ease'
                        })
                    ], md=4),
                    
                    # Humedad
                    dbc.Col([
                        dbc.Card([
                            dbc.CardBody([
                                html.Div([
                                    html.I(className="fas fa-tint mb-2", 
                                          style={'fontSize': '1.8rem', 'color': '#007bff'}),
                                    html.H6("Seguimiento H√≠drico", className="fw-bold mb-2"),
                                    html.P(f"Humedad: {humidity}%", className="small text-muted mb-2"),
                                    html.Div([
                                        html.Span("Estado: ", className="fw-bold"),
                                        html.Span(humidity_status, className="badge bg-success" if "üü¢" in humidity_status else "badge bg-warning" if "üü°" in humidity_status else "badge bg-danger")
                                    ])
                                ], className="text-center")
                            ], className="p-3")
                        ], style={
                            'background': 'linear-gradient(135deg, #cce5ff 0%, #b8daff 100%)',
                            'border': '1px solid #007bff',
                            'borderRadius': '10px',
                            'boxShadow': '0 3px 10px rgba(0, 123, 255, 0.1)',
                            'transition': 'transform 0.2s ease'
                        })
                    ], md=4),
                    
                    # Precipitaci√≥n
                    dbc.Col([
                        dbc.Card([
                            dbc.CardBody([
                                html.Div([
                                    html.I(className="fas fa-cloud-rain mb-2", 
                                          style={'fontSize': '1.8rem', 'color': '#28a745'}),
                                    html.H6("Gesti√≥n de Riego", className="fw-bold mb-2"),
                                    html.P(f"Lluvia: {rain} mm", className="small text-muted mb-2"),
                                    html.Div([
                                        html.Span("Estado: ", className="fw-bold"),
                                        html.Span(rain_status, className="badge bg-success" if "üü¢" in rain_status else "badge bg-warning" if "üü°" in rain_status else "badge bg-danger")
                                    ])
                                ], className="text-center")
                            ], className="p-3")
                        ], style={
                            'background': 'linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%)',
                            'border': '1px solid #28a745',
                            'borderRadius': '10px',
                            'boxShadow': '0 3px 10px rgba(40, 167, 69, 0.1)',
                            'transition': 'transform 0.2s ease'
                        })
                    ], md=4)
                ])
            ])
            
        except Exception as e:
            logger.error(f"‚ùå Error cr√≠tico en sistema de alertas: {e}")
            return dbc.Alert(
                f"Error analizando riesgo de enfermedades: {str(e)}", 
                color="danger", className="text-center"
            )
    
    logger.info("‚úÖ Todos los callbacks del layout hist√≥rico registrados exitosamente")