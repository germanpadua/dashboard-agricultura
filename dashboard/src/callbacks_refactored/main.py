"""
===============================================================================
                       CALLBACKS PRINCIPALES DEL DASHBOARD
===============================================================================

Este m√≥dulo contiene los callbacks transversales que coordinan la funcionalidad
global del dashboard agr√≠cola, incluyendo navegaci√≥n entre pesta√±as y renderizado
din√°mico de layouts.

Caracter√≠sticas principales:
‚Ä¢ Router inteligente con anti-rebote
‚Ä¢ Navegaci√≥n fluida entre pesta√±as
‚Ä¢ Carga din√°mica de layouts especializados
‚Ä¢ Validaci√≥n de pesta√±as permitidas
‚Ä¢ Manejo robusto de errores con fallbacks
‚Ä¢ Preprocesamiento de datos para layouts
‚Ä¢ Sistema de logging detallado

Autor: Sistema de Monitoreo Agr√≠cola
Versi√≥n: 2.1
√öltima actualizaci√≥n: 2025

===============================================================================
"""

# ===============================================================================
#                                 IMPORTS
# ===============================================================================

# Librer√≠as est√°ndar
import logging
import time

# Framework Dash
from dash import callback, Input, Output, State, html, no_update, callback_context
from dash.exceptions import PreventUpdate
import dash_bootstrap_components as dbc

# An√°lisis de datos
import pandas as pd

# Utilidades del proyecto (mantenidas para compatibilidad)
from src.utils.plots import make_soil_figure, make_temp_figure
from src.utils.weather_utils import get_municipio_code, get_prediccion_diaria, get_prediccion_horaria

# Configuraci√≥n de logging
logger = logging.getLogger(__name__)

# ===============================================================================
#                           FUNCIONES AUXILIARES
# ===============================================================================

def render_weather(tab: str, df: pd.DataFrame) -> html.Div:
    """
    Genera contenido contextual del panel meteorol√≥gico seg√∫n pesta√±a.
    
    Implementa dos modos de visualizaci√≥n:
    ‚Ä¢ 'hoy': Datos actuales del √∫ltimo registro disponible
    ‚Ä¢ 'semana': Resumen agregado de los √∫ltimos 7 d√≠as
    
    Args:
        tab (str): Modo de visualizaci√≥n ('hoy', 'semana')
        df (pd.DataFrame): Datos meteorol√≥gicos con columnas est√°ndar
                          ['Dates', 'Air_Temp', 'Rain', 'Wind_Speed', 
                           'Wind_Dir', 'Air_Relat_Hum']
                           
    Returns:
        html.Div: Componente con tarjetas meteorol√≥gicas estilizadas
    """
    # Mapeo de d√≠as de la semana a espa√±ol
    dias_es = {
        'Mon': 'lun', 'Tue': 'mar', 'Wed': 'mi√©', 'Thu': 'jue',
        'Fri': 'vie', 'Sat': 's√°b', 'Sun': 'dom'
    }

    # ===================================================================
    #                        MODO 'HOY' - DATOS ACTUALES
    # ===================================================================
    
    if tab == 'hoy':
        # Obtener √∫ltimo registro disponible
        latest_record = df.iloc[-1]
        fecha_actual = latest_record['Dates'].strftime("%d/%m/%Y %H:%M")
        
        # Estructurar informaci√≥n meteorol√≥gica actual
        current_weather_info = [
            ("üìÖ Fecha", fecha_actual),
            ("üå°Ô∏è Temperatura", f"{latest_record['Air_Temp']:.1f} ¬∞C"),
            ("üåßÔ∏è Precipitaci√≥n", f"{latest_record['Rain']:.1f} mm"),
            ("üí® Viento", f"{latest_record['Wind_Speed']:.1f} m/s, {int(latest_record['Wind_Dir'])}¬∞"),
            ("üå¨Ô∏è Humedad", f"{latest_record['Air_Relat_Hum']:.0f} %"),
        ]
        
        # Generar tarjetas informativas
        weather_cards = []
        for title, value in current_weather_info:
            card = dbc.Card([
                dbc.CardHeader(
                    title, 
                    className="fw-bold text-center",
                    style={'backgroundColor': '#f8f9fa', 'border': 'none'}
                ),
                dbc.CardBody(
                    html.H4(
                        value, 
                        className="card-title text-center mb-0",
                        style={'color': '#2E7D32', 'fontWeight': '700'}
                    )
                )
            ], className="shadow-sm border-0", 
               style={"minWidth": "10rem", "borderRadius": "12px"})
            
            weather_cards.append(card)
        
        return html.Div([
            dbc.Row(
                [dbc.Col(card, width="auto") for card in weather_cards], 
                className="g-4 justify-content-center"
            )
        ])

    # ===================================================================
    #                     MODO 'SEMANA' - RESUMEN SEMANAL
    # ===================================================================
    
    # Determinar ventana temporal para semana actual
    now = pd.Timestamp.now().normalize()
    monday_current_week = now - pd.Timedelta(days=now.weekday())
    
    # Filtrar datos de la semana actual
    week_data = df[
        (df['Dates'] >= monday_current_week) & 
        (df['Dates'] < monday_current_week + pd.Timedelta(days=7))
    ]
    
    # Fallback: si no hay datos de semana actual, usar √∫ltimos 7 d√≠as
    if week_data.empty:
        last_date = df['Dates'].max()
        week_data = df[
            (df['Dates'] >= last_date - pd.Timedelta(days=6)) & 
            (df['Dates'] <= last_date)
        ]
        logger.debug("üîÑ Usando √∫ltimos 7 d√≠as como fallback para vista semanal")

    # Agregaci√≥n diaria de datos meteorol√≥gicos
    aggregation_rules = {
        'Air_Temp': ['min', 'max'],  # Temperaturas m√≠n/m√°x
        'Rain': 'sum'                # Precipitaci√≥n acumulada
    }
    
    daily_summary = (
        week_data.set_index('Dates')
        .resample('D')
        .agg(aggregation_rules)
    )
    
    # Aplanar columnas multinivel
    daily_summary.columns = ['_'.join(col) for col in daily_summary.columns]

    # Generar tarjetas para cada d√≠a
    daily_cards = []
    for timestamp, daily_data in daily_summary.iterrows():
        # Informaci√≥n del d√≠a
        dia_abrev = dias_es.get(timestamp.strftime('%a'), timestamp.strftime('%a'))
        numero_dia = timestamp.day
        
        # Temperaturas
        temp_max = f"{daily_data['Air_Temp_max']:.0f}¬∞"
        temp_min = f"{daily_data['Air_Temp_min']:.0f}¬∞"
        
        # Precipitaci√≥n con icono contextual
        lluvia_total = daily_data['Rain_sum']
        precipitacion_text = f"{lluvia_total:.1f} mm"
        
        # Selecci√≥n inteligente de icono meteorol√≥gico
        if lluvia_total >= 5:
            weather_icon = 'üåßÔ∏è'  # Lluvia fuerte
        elif lluvia_total > 0:
            weather_icon = '‚õÖ'       # Parcialmente nublado
        else:
            weather_icon = '‚òÄÔ∏è'     # Soleado
        
        # Construir tarjeta individual
        daily_card = html.Div([
            # Header con d√≠a
            html.Div(
                f"{dia_abrev} {numero_dia}", 
                className="fw-bold mb-1",
                style={'fontSize': '0.85rem', 'color': '#2c3e50'}
            ),
            
            # Icono meteorol√≥gico
            html.Div(
                weather_icon, 
                style={
                    "fontSize": "1.6rem", 
                    "lineHeight": "1", 
                    "marginBottom": "8px"
                }
            ),
            
            # Temperatura m√°xima
            html.Div(
                temp_max, 
                className="fw-semibold",
                style={'fontSize': '0.9rem', 'color': '#e74c3c'}
            ),
            
            # Temperatura m√≠nima
            html.Div(
                temp_min, 
                className="text-muted",
                style={'fontSize': '0.8rem'}
            ),
            
            # Precipitaci√≥n
            html.Div(
                precipitacion_text, 
                style={'fontSize': '0.75rem', 'color': '#3498db'}
            )
        ], className="text-center p-2", style={
            "minWidth": "70px",
            "borderRadius": "0.75rem",
            "backgroundColor": "#f8f9fa",
            "boxShadow": "0 2px 4px rgba(0,0,0,0.1)",
            "transition": "transform 0.2s ease",
            "cursor": "default"
        })
        
        daily_cards.append(daily_card)

    return html.Div(
        daily_cards, 
        style={
            "display": "flex", 
            "gap": "8px", 
            "overflowX": "auto", 
            "padding": "4px",
            "scrollbarWidth": "thin"
        }
    )


# ===============================================================================
#                           FUNCI√ìN DE REGISTRO PRINCIPAL
# ===============================================================================

def register_callbacks(app):
    """
    Registra callbacks principales y transversales del dashboard agr√≠cola.
    
    Configura el sistema de navegaci√≥n inteligente que gestiona la transici√≥n
    entre pesta√±as del dashboard con las siguientes caracter√≠sticas avanzadas:
    
    ‚Ä¢ Router con anti-rebote y validaci√≥n de entrada
    ‚Ä¢ Navegaci√≥n fluida entre m√≥dulos especializados
    ‚Ä¢ Carga din√°mica de layouts con manejo de errores
    ‚Ä¢ Sistema de estado interno para prevenir cambios involuntarios
    ‚Ä¢ Fallback robusto en caso de errores de importaci√≥n
    
    Args:
        app: Instancia de la aplicaci√≥n Dash
        
    Note:
        Esta funci√≥n debe llamarse una sola vez durante la inicializaci√≥n
        de la aplicaci√≥n para registrar correctamente todos los callbacks
        del sistema de navegaci√≥n.
    """
    logger.info("üîß Iniciando registro de callbacks principales...")

    # ===================================================================
    #                    CONFIGURACI√ìN DE NAVEGACI√ìN
    # ===================================================================
    
    # Pesta√±as v√°lidas del sistema - conjunto inmutable para seguridad
    ALLOWED_TABS = {
        "detecciones",      # An√°lisis de enfermedades detectadas
        "historico",        # Datos meteorol√≥gicos hist√≥ricos  
        "prediccion",       # Pron√≥sticos y modelos predictivos
        "datos-satelitales", # An√°lisis de im√°genes satelitales
        "fincas"           # Gesti√≥n de propiedades agr√≠colas
    }

    # Estado interno del m√≥dulo para control de anti-rebote
    _navigation_state = {
        "last_tab": None,           # √öltima pesta√±a v√°lida seleccionada
        "last_change_ts": 0.0,      # Timestamp del √∫ltimo cambio exitoso
        "debounce_threshold": 0.5   # Umbral m√≠nimo entre cambios (segundos)
    }

    # ===================================================================
    #                    CALLBACK PRINCIPAL DE NAVEGACI√ìN
    # ===================================================================

    @app.callback(
        # Salidas duales: contenido din√°mico y confirmaci√≥n de pesta√±a activa
        Output("main-content", "children"),     # Contenido principal del dashboard
        Output("main-tabs", "value"),          # Pesta√±a activa (con autocorrecci√≥n)
        
        # Entradas: pesta√±a seleccionada y datos de contexto
        Input("main-tabs", "value"),           # Pesta√±a solicitada por el usuario
        State('weather-data', 'data'),         # Datos meteorol√≥gicos en memoria
        State('kml-data', 'data'),            # Datos geoespaciales cargados
        
        # Configuraci√≥n del callback
        prevent_initial_call=False,            # Permitir carga inicial
        allow_duplicate=True                   # Permitir actualizaciones duplicadas
    )
    def intelligent_layout_router(selected_tab, weather_data, kml_data):
        """
        Router inteligente de layouts con sistema anti-rebote y validaci√≥n.
        
        Gestiona la navegaci√≥n entre diferentes m√≥dulos del dashboard con
        validaci√≥n robusta y recuperaci√≥n de errores. Implementa un sistema
        de anti-rebote para evitar cambios involuntarios muy r√°pidos.
        
        Args:
            selected_tab (str): Pesta√±a seleccionada por el usuario
            weather_data (list): Datos meteorol√≥gicos en formato JSON
            kml_data (dict): Datos geoespaciales en formato GeoJSON
            
        Returns:
            tuple: (layout_content, confirmed_tab)
                - layout_content: Componente Dash con el layout renderizado
                - confirmed_tab: Pesta√±a efectivamente activa (puede diferir 
                  de selected_tab en caso de rebote o error)
                  
        Raises:
            PreventUpdate: Cuando se detecta entrada inv√°lida o rebote
        """
        current_timestamp = time.time()
        
        logger.info(f"üß≠ Solicitud de navegaci√≥n a pesta√±a: '{selected_tab}'")

        # ===============================================================
        #                    VALIDACI√ìN DE ENTRADA
        # ===============================================================
        
        # Filtro primario: rechazar valores None o pesta√±as inv√°lidas
        if selected_tab is None or selected_tab not in ALLOWED_TABS:
            logger.warning(f"‚ö†Ô∏è Pesta√±a inv√°lida rechazada: '{selected_tab}'")
            logger.debug(f"Pesta√±as v√°lidas: {ALLOWED_TABS}")
            raise PreventUpdate  # No realizar ning√∫n cambio

        # ===============================================================
        #                    SISTEMA ANTI-REBOTE
        # ===============================================================
        
        # Detectar cambios muy r√°pidos que podr√≠an ser rebotes involuntarios
        last_tab = _navigation_state["last_tab"]
        last_timestamp = _navigation_state["last_change_ts"]
        debounce_threshold = _navigation_state["debounce_threshold"]
        
        if (last_tab is not None 
            and last_tab != selected_tab
            and (current_timestamp - last_timestamp) < debounce_threshold):
            
            logger.warning(
                f"üö´ Cambio demasiado r√°pido detectado: "
                f"'{last_tab}' ‚Üí '{selected_tab}' "
                f"(Œît: {current_timestamp - last_timestamp:.3f}s)"
            )
            
            # Devolver al estado anterior sin cambios
            return no_update, last_tab

        # ===============================================================
        #                PREPARACI√ìN DE DATOS AUXILIARES
        # ===============================================================
        
        # Reconstruir DataFrame meteorol√≥gico desde datos serializados
        weather_df = pd.DataFrame(weather_data) if weather_data else pd.DataFrame()
        
        # Conversi√≥n segura de fechas si existen datos
        if not weather_df.empty and 'Dates' in weather_df.columns:
            try:
                weather_df['Dates'] = pd.to_datetime(
                    weather_df['Dates'], 
                    format='mixed', 
                    errors='coerce'
                )
                logger.debug(f"üìÖ Datos meteorol√≥gicos procesados: {len(weather_df)} registros")
            except Exception as e:
                logger.error(f"‚ö†Ô∏è Error procesando fechas meteorol√≥gicas: {e}")
        
        # Preparar datos geoespaciales
        kml_geojson = kml_data if kml_data else {}
        
        if kml_geojson:
            logger.debug("üó∫Ô∏è Datos geoespaciales disponibles para el layout")

        # ===============================================================
        #                    RENDERIZADO DIN√ÅMICO DE LAYOUTS
        # ===============================================================
        
        layout_content = None
        
        try:
            # Enrutamiento basado en pesta√±a seleccionada
            if selected_tab == "detecciones":
                logger.info("ü¶† Construyendo layout de detecciones de enfermedades...")
                from src.layouts.layout_detecciones_enhanced import build_layout_detecciones_enhanced
                layout_content = build_layout_detecciones_enhanced()
                
            elif selected_tab == "historico":
                logger.info("üìä Construyendo layout de an√°lisis hist√≥rico...")
                from src.layouts.layout_historico import build_layout_historico_improved
                layout_content = build_layout_historico_improved(weather_df, kml_geojson)
                
            elif selected_tab == "prediccion":
                logger.info("üîÆ Construyendo layout de predicciones meteorol√≥gicas...")
                from src.layouts.layout_prediccion_improved import build_layout_prediccion_improved
                layout_content = build_layout_prediccion_improved()
                
            elif selected_tab == "datos-satelitales":
                logger.info("üõ∞Ô∏è Construyendo layout de an√°lisis satelital...")
                
                # Sistema de importaci√≥n con recarga forzada para desarrollo
                import importlib
                import inspect
                
                try:
                    import src.layouts.layout_datos_satelitales_improved as satellite_layout
                    
                    # Forzar recarga del m√≥dulo (√∫til durante desarrollo)
                    satellite_layout = importlib.reload(satellite_layout)
                    
                    logger.debug(f"‚úÖ M√≥dulo satelital cargado desde: {inspect.getfile(satellite_layout)}")
                    
                    # Verificar que la funci√≥n principal existe
                    if hasattr(satellite_layout, 'build_scientific_satellite_layout'):
                        layout_content = satellite_layout.build_scientific_satellite_layout()
                        logger.info("‚úÖ Layout satelital construido exitosamente")
                    else:
                        raise AttributeError("Funci√≥n 'build_scientific_satellite_layout' no encontrada")
                        
                except ImportError as ie:
                    logger.error(f"‚ùå Error de importaci√≥n en m√≥dulo satelital: {ie}")
                    raise
                except Exception as e:
                    logger.error(f"‚ùå Error general en construcci√≥n satelital: {e}")
                    raise
                
            elif selected_tab == "fincas":
                logger.info("üèûÔ∏è Construyendo layout de gesti√≥n de fincas...")
                from src.layouts.layout_fincas_improved import build_layout_fincas_improved
                layout_content = build_layout_fincas_improved()
                
            else:
                # Este caso nunca deber√≠a ejecutarse debido a ALLOWED_TABS
                logger.error(f"‚ùå Pesta√±a no implementada: '{selected_tab}'")
                raise PreventUpdate
                
        except Exception as construction_error:
            logger.error(
                f"üí• Error cr√≠tico construyendo layout '{selected_tab}': "
                f"{construction_error}"
            )
            
            # Layout de emergencia con informaci√≥n de error
            layout_content = html.Div([
                dbc.Alert([
                    html.H4("‚ö†Ô∏è Error de Construcci√≥n", className="alert-heading"),
                    html.P(f"No se pudo cargar la pesta√±a '{selected_tab}'"),
                    html.Hr(),
                    html.P(f"Error t√©cnico: {str(construction_error)}", className="mb-0")
                ], color="danger", className="mx-3 mt-3"),
                
                html.Div([
                    html.H5("üîß Modo de Emergencia Activado"),
                    html.P("El sistema ha activado un layout de emergencia. "
                           "Por favor, intente navegar a otra pesta√±a o "
                           "contacte al administrador si el problema persiste.")
                ], className="text-center text-muted p-4")
            ])

        # ===============================================================
        #                    ACTUALIZACI√ìN DE ESTADO
        # ===============================================================
        
        # Registrar cambio exitoso en el estado interno
        _navigation_state["last_tab"] = selected_tab
        _navigation_state["last_change_ts"] = current_timestamp
        
        logger.info(f"‚úÖ Navegaci√≥n completada exitosamente a '{selected_tab}'")
        
        # Retornar layout construido y confirmar pesta√±a activa
        return layout_content, selected_tab

    # ===================================================================
    #                    CONFIRMACI√ìN DE REGISTRO
    # ===================================================================
    
    logger.info("‚úÖ Callbacks principales registrados correctamente")
    logger.debug(f"Sistema de navegaci√≥n configurado para {len(ALLOWED_TABS)} pesta√±as")

