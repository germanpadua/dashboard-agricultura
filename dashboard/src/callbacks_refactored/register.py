"""
===============================================================================
                    SISTEMA DE REGISTRO CENTRAL DE CALLBACKS
===============================================================================

M√≥dulo coordinador que centraliza el registro de todos los callbacks modulares
del dashboard agr√≠cola. Implementa un sistema de carga segura con manejo robusto
de errores y logging detallado.

Caracter√≠sticas principales:
‚Ä¢ Registro centralizado y coordinado de callbacks por m√≥dulo
‚Ä¢ Sistema de importaci√≥n segura con fallbacks
‚Ä¢ Manejo granular de errores por m√≥dulo
‚Ä¢ Logging detallado para debugging y monitoreo
‚Ä¢ Separaci√≥n de responsabilidades (navegaci√≥n en main.py)
‚Ä¢ Carga condicional de m√≥dulos opcionales

Arquitectura modular:
‚Ä¢ main.py: Callbacks de navegaci√≥n principal y routing
‚Ä¢ datos_satelitales.py: An√°lisis y visualizaci√≥n satelital
‚Ä¢ detecciones.py: Sistema de detecci√≥n de enfermedades
‚Ä¢ fincas.py: Gesti√≥n CRUD de propiedades agr√≠colas
‚Ä¢ historico.py: An√°lisis de datos meteorol√≥gicos hist√≥ricos
‚Ä¢ prediccion.py: Modelos predictivos y pron√≥sticos

Autor: Sistema de Monitoreo Agr√≠cola
Versi√≥n: 2.1
√öltima actualizaci√≥n: 2025

===============================================================================
"""
# ===============================================================================
#                                 IMPORTS
# ===============================================================================

# Librer√≠as est√°ndar
import logging

# Configuraci√≥n de logging
logger = logging.getLogger(__name__)

# ===============================================================================
#                           FUNCIONES AUXILIARES
# ===============================================================================

def _safe_import(primary_path, primary_name, fallback_path=None, fallback_name=None):
    """
    Realiza importaci√≥n segura con fallback para builders de layout.
    
    Permite importar funciones o clases desde m√∫ltiples rutas posibles,
    proporcionando resilencia ante reorganizaciones de c√≥digo o m√≥dulos
    opcionales que podr√≠an no estar disponibles.
    
    Args:
        primary_path (str): Ruta principal del m√≥dulo a importar
        primary_name (str): Nombre de la funci√≥n/clase a importar
        fallback_path (str, optional): Ruta alternativa en caso de fallo
        fallback_name (str, optional): Nombre alternativo a importar
        
    Returns:
        callable or None: Funci√≥n/clase importada, o None si ambas fallan
        
    Example:
        >>> builder = _safe_import(
        ...     'src.layouts.layout_main', 'build_layout',
        ...     'app.layouts.main', 'build_main_layout'
        ... )
    """
    try:
        # Intento de importaci√≥n primaria
        module = __import__(primary_path, fromlist=[primary_name])
        imported_object = getattr(module, primary_name)
        logger.debug(f"‚úÖ Importaci√≥n exitosa: {primary_path}.{primary_name}")
        return imported_object
        
    except Exception as primary_error:
        logger.debug(f"‚ö†Ô∏è Fall√≥ importaci√≥n primaria {primary_path}.{primary_name}: {primary_error}")
        
        # Intento de fallback si est√° disponible
        if fallback_path and fallback_name:
            try:
                fallback_module = __import__(fallback_path, fromlist=[fallback_name])
                fallback_object = getattr(fallback_module, fallback_name)
                logger.warning(
                    f"üîÑ Usando fallback: {fallback_path}.{fallback_name} "
                    f"(primario fall√≥: {primary_error})"
                )
                return fallback_object
                
            except Exception as fallback_error:
                logger.error(
                    f"‚ùå Tambi√©n fall√≥ fallback {fallback_path}.{fallback_name}: "
                    f"{fallback_error}"
                )
        
        # Ambas importaciones fallaron
        logger.error(f"üí• Importaci√≥n completamente fallida para {primary_path}.{primary_name}")
        return None

# ===============================================================================
#                     FUNCI√ìN PRINCIPAL DE REGISTRO
# ===============================================================================

def register_all_callbacks(app):
    """
    Registra sistem√°ticamente todos los callbacks modulares del dashboard.
    
    Coordina el proceso de registro de callbacks de todos los m√≥dulos
    especializados, implementando un manejo robusto de errores que permite
    al sistema continuar funcionando aunque algunos m√≥dulos fallen.
    
    Arquitectura de registro:
    ‚Ä¢ main.py: Sistema de navegaci√≥n y routing principal
    ‚Ä¢ datos_satelitales.py: An√°lisis de im√°genes satelitales
    ‚Ä¢ detecciones.py: Sistema de detecci√≥n de enfermedades
    ‚Ä¢ fincas.py: Gesti√≥n CRUD de propiedades agr√≠colas
    ‚Ä¢ historico.py: An√°lisis meteorol√≥gico hist√≥rico
    ‚Ä¢ prediccion.py: Modelos predictivos y pron√≥sticos
    
    Args:
        app: Instancia de aplicaci√≥n Dash donde registrar los callbacks
        
    Note:
        ‚Ä¢ El callback de navegaci√≥n principal est√° en main.py para evitar
          conflictos de Output("main-content", "children")
        ‚Ä¢ Cada m√≥dulo se registra independientemente con manejo de errores
        ‚Ä¢ Los fallos individuales no impiden el registro de otros m√≥dulos
    """
    logger.info("üöÄ Iniciando proceso de registro centralizado de callbacks...")
    
    # Contadores para estad√≠sticas de registro
    successful_registrations = 0
    failed_registrations = 0
    
    # ===================================================================
    #                    CALLBACKS PRINCIPALES (NAVEGACI√ìN)
    # ===================================================================
    
    # IMPORTANTE: El callback de navegaci√≥n debe registrarse primero
    # para establecer el Output("main-content", "children") principal
    try:
        logger.info("üìç Registrando callbacks principales (navegaci√≥n)...")
        from . import main
        main.register_callbacks(app)
        logger.info("‚úÖ Sistema de navegaci√≥n principal registrado exitosamente")
        successful_registrations += 1
    except Exception as main_error:
        logger.critical(
            f"üí• ERROR CR√çTICO registrando navegaci√≥n principal: {main_error}\n"
            "El sistema podr√≠a no funcionar correctamente sin navegaci√≥n."
        )
        failed_registrations += 1
    
    # ===================================================================
    #                    CALLBACKS MODULARES ESPECIALIZADOS
    # ===================================================================
    
    # Configuraci√≥n de m√≥dulos con informaci√≥n detallada
    callback_modules = [
        {
            'name': 'datos_satelitales',
            'description': 'An√°lisis y visualizaci√≥n de datos satelitales',
            'icon': 'üõ∞Ô∏è',
            'import_path': '.datos_satelitales',
            'register_function': 'register_callbacks',
            'critical': False  # No cr√≠tico para funcionalidad b√°sica
        },
        {
            'name': 'detecciones',
            'description': 'Sistema de detecci√≥n y an√°lisis de enfermedades',
            'icon': 'ü¶†',
            'import_path': '.detecciones',
            'register_function': 'register_callbacks',
            'critical': True   # Funcionalidad core del dashboard
        },
        {
            'name': 'fincas',
            'description': 'Gesti√≥n CRUD de propiedades agr√≠colas',
            'icon': 'üèûÔ∏è',
            'import_path': '.fincas', 
            'register_function': 'register_callbacks',
            'critical': True   # Gesti√≥n de fincas es cr√≠tica
        },
        {
            'name': 'historico',
            'description': 'An√°lisis de datos meteorol√≥gicos hist√≥ricos',
            'icon': 'üìä',
            'import_path': '.historico',
            'register_function': 'register_callbacks',
            'critical': True   # An√°lisis hist√≥rico es core
        },
        {
            'name': 'prediccion',
            'description': 'Modelos predictivos y pron√≥sticos meteorol√≥gicos',
            'icon': 'üîÆ',
            'import_path': '.prediccion',
            'register_function': 'register_callbacks',
            'critical': True   # Predicciones son funcionalidad core
        },
        {
            'name': 'help_modals',
            'description': 'Modales de ayuda e informaci√≥n del dashboard',
            'icon': '‚ÑπÔ∏è',
            'import_path': '..components.help_modals',
            'register_function': 'register_modal_callbacks',
            'critical': False  # Funcionalidad auxiliar
        }
    ]
    
    # Registro sistem√°tico de cada m√≥dulo
    for module_config in callback_modules:
        module_name = module_config['name']
        description = module_config['description']
        icon = module_config['icon']
        import_path = module_config['import_path']
        register_func = module_config['register_function']
        is_critical = module_config['critical']
        
        try:
            logger.info(f"{icon} Registrando callbacks de {module_name}...")
            logger.debug(f"Descripci√≥n: {description}")
            
            # Importaci√≥n din√°mica del m√≥dulo
            module = __import__(import_path, fromlist=[register_func], level=1)
            register_function = getattr(module, register_func)
            
            # Registro de callbacks del m√≥dulo
            register_function(app)
            
            logger.info(f"‚úÖ Callbacks de {module_name} registrados exitosamente")
            successful_registrations += 1
            
        except ImportError as import_error:
            error_level = logger.error if is_critical else logger.warning
            error_level(
                f"üì¶ Error de importaci√≥n en m√≥dulo {module_name}: {import_error}\n"
                f"Ruta: {import_path} | Funci√≥n: {register_func}"
            )
            failed_registrations += 1
            
        except AttributeError as attr_error:
            error_level = logger.error if is_critical else logger.warning  
            error_level(
                f"üîç Funci√≥n '{register_func}' no encontrada en {module_name}: "
                f"{attr_error}"
            )
            failed_registrations += 1
            
        except Exception as general_error:
            error_level = logger.error if is_critical else logger.warning
            error_level(
                f"üí• Error general registrando {module_name}: {general_error}\n"
                f"Tipo: {type(general_error).__name__}"
            )
            failed_registrations += 1
    
    # ===================================================================
    #                    M√ìDULOS OPCIONALES COMENTADOS
    # ===================================================================
    
    # M√≥dulos que est√°n temporalmente deshabilitados
    logger.debug("‚ÑπÔ∏è M√≥dulos opcionales omitidos: ninguno")
    
    # ===================================================================
    #                    REPORTE FINAL DE REGISTRO
    # ===================================================================
    
    total_modules = successful_registrations + failed_registrations
    success_rate = (successful_registrations / total_modules * 100) if total_modules > 0 else 0
    
    if failed_registrations == 0:
        logger.info(
            f"üéâ ¬°Registro completado exitosamente! "
            f"Todos los {successful_registrations} m√≥dulos registrados correctamente."
        )
    else:
        logger.warning(
            f"‚ö†Ô∏è Registro completado con advertencias:\n"
            f"   ‚Ä¢ Exitosos: {successful_registrations}\n"
            f"   ‚Ä¢ Fallidos: {failed_registrations}\n"
            f"   ‚Ä¢ Tasa de √©xito: {success_rate:.1f}%"
        )
        
        if failed_registrations > successful_registrations:
            logger.error(
                "üö® ALERTA: M√°s m√≥dulos fallaron que se registraron exitosamente. "
                "El dashboard podr√≠a tener funcionalidad limitada."
            )
    
    logger.info(f"üìã Resumen: {successful_registrations}/{total_modules} m√≥dulos operativos")