#!/usr/bin/env python3
"""
üßπ Utilidad de gesti√≥n de cach√© satelital

Herramienta simple para gestionar el cach√© inteligente de datos satelitales.
Los datos satelitales son inmutables (una imagen de una fecha nunca cambia),
por lo que solo se limpia por espacio, no por tiempo.

Uso:
    python cache_manager.py stats          # Mostrar estad√≠sticas
    python cache_manager.py clean          # Limpiar cach√© (1GB l√≠mite)
    python cache_manager.py clean --size 500  # Limpiar hasta 500MB
    python cache_manager.py clean --corrupted  # Solo archivos corruptos
"""

import argparse
import sys
from pathlib import Path

# Agregar el directorio src al path para importar los m√≥dulos
sys.path.insert(0, str(Path(__file__).parent / "src"))

try:
    from utils.api_quota_manager import get_intelligent_cache, manual_cache_cleanup
except ImportError as e:
    print(f"‚ùå Error importando m√≥dulos: {e}")
    print("Aseg√∫rate de ejecutar desde el directorio ra√≠z del proyecto")
    sys.exit(1)


def show_stats():
    """Muestra estad√≠sticas del cach√©."""
    try:
        cache_manager = get_intelligent_cache()
        stats = cache_manager.get_cache_stats()
        
        print("üìä Estad√≠sticas del Cach√© Satelital")
        print("=" * 40)
        print(f"Entradas totales: {stats['total_entries']}")
        print(f"En memoria: {stats['memory_entries']}")
        print(f"Tama√±o total: {stats['total_size_mb']} MB")
        print(f"Cache hits: {stats['cache_hits']}")
        print(f"Cache misses: {stats['cache_misses']}")
        print(f"Hit rate: {stats['hit_rate_percent']}%")
        print(f"√öltima limpieza: {stats['last_cleanup']}")
        print()
        
        # Informaci√≥n adicional
        if stats['total_size_mb'] > 1000:
            print("‚ö†Ô∏è  Cach√© > 1GB - considera hacer limpieza")
        elif stats['total_size_mb'] > 500:
            print("üí° Cach√© moderadamente grande")
        else:
            print("‚úÖ Cach√© en tama√±o √≥ptimo")
            
    except Exception as e:
        print(f"‚ùå Error obteniendo estad√≠sticas: {e}")


def clean_cache(max_size_mb=1000, corrupted_only=False):
    """Limpia el cach√©."""
    try:
        print(f"üßπ Iniciando limpieza del cach√©...")
        
        if corrupted_only:
            print("üîß Solo limpiando archivos corruptos...")
            cache_manager = get_intelligent_cache()
            cache_manager.cleanup_corrupted_cache()
            print("‚úÖ Limpieza de archivos corruptos completada")
        else:
            print(f"üóÇÔ∏è  Limpiando hasta {max_size_mb} MB...")
            result = manual_cache_cleanup(max_size_mb, clean_corrupted=True)
            
            if result['success']:
                print("‚úÖ Limpieza completada:")
                print(f"   ‚Ä¢ Liberados: {result['freed_mb']:.1f} MB")
                print(f"   ‚Ä¢ Archivos eliminados: {result['removed_entries']}")
                print(f"   ‚Ä¢ Tama√±o final: {result['after']['total_size_mb']} MB")
            else:
                print(f"‚ùå Error en limpieza: {result['error']}")
                
    except Exception as e:
        print(f"‚ùå Error durante limpieza: {e}")


def main():
    parser = argparse.ArgumentParser(
        description="üßπ Gestor de cach√© satelital",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Ejemplos:
  python cache_manager.py stats                    # Ver estad√≠sticas
  python cache_manager.py clean                    # Limpiar hasta 1GB
  python cache_manager.py clean --size 500         # Limpiar hasta 500MB
  python cache_manager.py clean --corrupted        # Solo archivos corruptos
        """
    )
    
    parser.add_argument('action', choices=['stats', 'clean'], 
                       help='Acci√≥n a realizar')
    parser.add_argument('--size', type=int, default=1000,
                       help='Tama√±o m√°ximo del cach√© en MB (default: 1000)')
    parser.add_argument('--corrupted', action='store_true',
                       help='Solo limpiar archivos corruptos')
    
    args = parser.parse_args()
    
    print("üõ∞Ô∏è  Dashboard Agricultura - Gestor de Cach√©")
    print("=" * 50)
    
    if args.action == 'stats':
        show_stats()
    elif args.action == 'clean':
        clean_cache(args.size, args.corrupted)


if __name__ == '__main__':
    main()